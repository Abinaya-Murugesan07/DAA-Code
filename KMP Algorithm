#include <iostream>
#include <vector>

std::vector<int> computeLPS(const std::string& pattern) {
    int len = 0;
    int i = 1;
    std::vector<int> lps(pattern.length(), 0);

    while (i < pattern.length()) {
        if (pattern[i] == pattern[len]) {
            ++len;
            lps[i] = len;
            ++i;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                ++i;
            }
        }
    }

    return lps;
}

void kmpSearch(const std::string& text, const std::string& pattern) {
    std::vector<int> lps = computeLPS(pattern);
    int i = 0;
    int j = 0;

    while (i < text.length()) {
        if (pattern[j] == text[i]) {
            ++j;
            ++i;
        }

        if (j == pattern.length()) {
            std::cout << "Pattern found at index " << i - j << std::endl;
            j = lps[j - 1];
        } else if (i < text.length() && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                ++i;
            }
        }
    }
}

int main() {
    std::string text, pattern;
    std::cout << "Enter the text: ";
    std::getline(std::cin, text);

    std::cout << "Enter the pattern to search for: ";
    std::getline(std::cin, pattern);

    kmpSearch(text, pattern);

    return 0;
}
